1.Entity란 ?
DB의 테이블에 존재하는 Column들을 필드로 가지는 객체를 뜻한다.
DB의 테이블과 1대1 대응이며, 테이블에 가지지 않는 칼럼을 피드로 가져서는 안된다.
또한 Entity 클래스는 다른 클래스를 상속받거나 인터페이스의 구현체여서는 안되고 순수한 데이터 객체인 것이 좋다.

Q. BaseEntity를 만들어 상속하라는 것은 무엇인가 ?


2.DTO(Date Transfer Object)
DTO는 말 그대로 데이터를 Transfer(이동)하기 위한 객체이다. 
Client가 Controller에 요청을 보낼 때도 RequestDto의 형식으로 데이터가 이동하고, 
Controller가 Client에게 응답을 보낼 때도 ResponseDto의 형태로 데이터를 보내게 된다.
 
Controller와 Service, Repository 계층 사이에 데이터가 오갈 때도 데이터는 DTO의 형태로 이동하게 된다.

DTO는 로직을 갖고 있지 않는 순수한 데이터 객체이며, 일반적으로 getter/setter 메서드만을 가진다. 
하지만 DTO는 단순히 데이터를 옮기는 용도이기 때문에 굳이 Setter를 이용해 값을 수정할 필요가 없이, 
생성자만을 사용하여 값을 할당하는 게 좋다. 


3.DAO(Data Access Object)
DAO는 말 그대로 실제 DB에 접근하는 객체를 뜻한다. 
DAO는 Service와 실제 데이터베이스를 연결하는 역할을 하게 된다. 
즉, DB에서 데이터를 꺼내오거나 넣는 역할을 DAO가 담당한다.

JPA의 경우 Repository가 DAO의 역할을 한다고 볼 수 있다. 
하지만 DAO와 Repository가 같은 것은 아니다. 

 DAO 와 Repository 차이점.
  >DAO가 비록 객체-지향적인 인터페이스를 제공하려는 의도를 가지고 있다고 하더라도 
실제 개발 시에는 하부의 퍼시스턴스 메커니즘이 데이터베이스라는 사실을 숨기려고 하지 않는다. 
DAO의 인터페이스는 데이터베이스의 CRUD 쿼리와 1:1 매칭 되는 세밀한 단위의 오퍼레이션을 제공한다.
반면 REPOSITORY는 메모리에 로드된 객체 컬렉션에 대한 집합 처리를 위한 인터페이스를 제공한다. 
  
