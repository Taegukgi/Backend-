팩토리 패턴(Factory Pattern)은 객체지향 프로그래밍에서 가장 널리 사용되는 디자인 패턴 중 하나로, 객체의 생성 로직을 캡슐화하는 데 사용됩니다. 
팩토리 패턴의 목적은 객체를 생성하는 인터페이스를 정의하고, 어떤 클래스의 인스턴스를 만들지는 서브 클래스가 결정하게 하는 것입니다. 
이 패턴은 호출자에게는 구체 클래스를 숨기고 객체 생성을 위한 인터페이스를 제공합니다.

팩토리 패턴은 주로 다음과 같은 경우에 사용됩니다:

객체 생성과 클래스 구현을 분리해야 할 때: 팩토리 패턴은 객체 생성과 그것을 사용하는 코드를 분리합니다. 
이렇게 하면 클래스의 인스턴스를 만드는 데 사용되는 특정 클래스를 변경해야 할 때 코드의 다른 부분을 수정하지 않고도 변경을 할 수 있습니다.

여러 개의 서브 클래스 중에서 결정적으로 생성할 클래스를 런타임에 결정해야 할 때: 팩토리 메서드는 어떤 서브 클래스의 인스턴스를 생성할지를 런타임에 결정합니다.


public interface Shape {
   void draw();
}

public class Rectangle implements Shape {
   @Override
   public void draw() {
      System.out.println("Drawing a rectangle");
   }
}

public class Circle implements Shape {
   @Override
   public void draw() {
      System.out.println("Drawing a circle");
   }
}

public class ShapeFactory {
   public Shape getShape(String shapeType){
      if(shapeType == null){
         return null;
      }     
      if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
      } else if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();
      }
      return null;
   }
}
